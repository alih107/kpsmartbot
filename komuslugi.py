import main
import helper
import requests
import logging
import math
fb_url = main.fb_url
url = main.url
portal_id = main.portal_id
x_channel_id = main.x_channel_id


def get_komuslugi(last_sender_message, data):
    message = data['data']
    result = ''
    session = requests.Session()
    status = 'FAILED'
    try:
        headers = {"Authorization": "Basic " + last_sender_message['encodedLoginPass'],
                   'Content-Type': 'application/json'}
        url_login = 'https://post.kz/mail-app/api/account/'
        r = session.get(url_login, headers=headers)

        url_login = 'https://post.kz/mail-app/api/v2/subscriptions'
        r = session.post(url_login, json=data)
        data = r.json()
        status = data['responseInfo']['status']
        if status == 'FAILED':
            result = '–ö–≤–∏—Ç–∞–Ω—Ü–∏–π –ø–æ –ª–∏—Ü–µ–≤–æ–º—É —Å—á—ë—Ç—É ' + message + ' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n'
        else:
            sum = 0
            subscriptionId = str(r.json()['subscriptionData']['id'])
            url_login = 'https://post.kz/mail-app/api/v2/subscriptions/' + subscriptionId + '/invoices'
            data = session.get(url_login).json()
            status = data['responseInfo']['status']
            invoiceData = data['invoiceData'][0]
            result = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ª–∏—Ü–µ–≤–æ–º—É —Å—á—ë—Ç—É ' + message + '\n'
            result += invoiceData['description'] + '\n\n'
            for i in invoiceData['details']:
                desc = i['description']
                amount = i['amount']
                amount_str = ', —Å—É–º–º–∞ ' + str(amount) + ' —Ç–≥'
                debt = i['debt']
                sum += amount + debt
                debt_str = ''
                if debt > 0:
                    debt_str = ', –¥–æ–ª–≥ ' + str(debt) + ' —Ç–≥'
                result += desc + debt_str + amount_str + '\n'
            result += '\n–ò—Ç–æ–≥–æ: ' + format(sum, '.2f') + ' —Ç–≥'
    except:
        main.reply(last_sender_message['sender'], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
        logging.error(helper.PrintException())
        return 'error', status
    return result, status

def get_komuslugi_invoice(last_sender_message):
    message = last_sender_message['astanaErc_last_acc']
    data = {'operatorId': 'astanaErcWf', 'data': message}
    session = requests.Session()
    invoiceData = {}
    try:
        headers = {"Authorization": "Basic " + last_sender_message['encodedLoginPass'],
                   'Content-Type': 'application/json'}
        url_login = 'https://post.kz/mail-app/api/account/'
        r = session.get(url_login, headers=headers)

        url_login = 'https://post.kz/mail-app/api/v2/subscriptions'
        r = session.post(url_login, json=data)
        subscriptionId = str(r.json()['subscriptionData']['id'])
        url_login = 'https://post.kz/mail-app/api/v2/subscriptions/' + subscriptionId + '/invoices'
        data = session.get(url_login).json()
        invoiceData = data['invoiceData'][0]
    except:
        main.reply(last_sender_message['sender'], "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
        logging.error(helper.PrintException())
    return invoiceData

def reply_komuslugi_cities(sender):
    data_buttons_cities = {
        "recipient": {"id": sender},
        "message": {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "generic",
                    "elements": [
                        {
                            "title": "üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥",
                            "buttons": [
                                {
                                    "type": "postback",
                                    "title": "–ê—Å—Ç–∞–Ω–∞ –ï–†–¶",
                                    "payload": "astanaErc"
                                }
                            ]
                        }
                    ]
                }
            }
        }
    }
    requests.post(fb_url, json=data_buttons_cities)

def reply_astanaErc_enter(sender, last_sender_message):
    astanaErc_accounts = []
    try:
        astanaErc_accounts = last_sender_message['astanaErc_accounts']
    except:
        last_sender_message['astanaErc_accounts'] = []

    try:
        assert len(astanaErc_accounts) > 0
        buttons = []
        for acc in astanaErc_accounts:
            buttons.append({"content_type": "text", "payload": "astanaErc.last", "title": acc})
        buttons.append({"content_type": "text", "payload": "astanaErc.delete", "title": "–£–¥–∞–ª–∏—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç"})
        data_quick_replies = {
            "recipient": {"id": sender},
            "message": {
                "text": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞ –ê—Å—Ç–∞–Ω–∞ –ï–†–¶ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ\n" + main.hint_main_menu,
                "quick_replies": buttons
            }
        }
        requests.post(fb_url, json=data_quick_replies)
    except:
        main.reply(sender, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞ –ê—Å—Ç–∞–Ω–∞ –ï–†–¶\n" + main.hint_main_menu)
    last_sender_message['payload'] = 'astanaErc.enter'
    main.mongo_update_record(last_sender_message)

def reply_astanaErc(sender, message, last_sender_message):
    main.reply_typing_on(sender)
    try:
        if not main.check_login(sender, last_sender_message):
            return
        data = {'operatorId': 'astanaErcWf', 'data': message}
        result, status = get_komuslugi(last_sender_message, data)
        if result == 'error':
            return
        if not "astanaErc_accounts" in last_sender_message:
            last_sender_message['astanaErc_accounts'] = []
        if not message in last_sender_message['astanaErc_accounts'] and len(last_sender_message['astanaErc_accounts']) < 10:
            last_sender_message['astanaErc_accounts'].append(message)

        reply_astanaErc_quick_replies_with_delete(sender, last_sender_message['astanaErc_accounts'], result, status)
        last_sender_message['astanaErc_last_acc'] = message
        main.mongo_update_record(last_sender_message)
    except:
        logging.error(helper.PrintException())

def reply_astanaErc_quick_replies_with_delete(sender, astanaErc_accounts, text, status):
    main.reply(sender, text)
    data_text = "(–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é, –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞ –ê—Å—Ç–∞–Ω–∞ –ï–†–¶, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å " \
                "–∫–≤–∏—Ç–∞–Ω—Ü–∏–∏, –ª–∏–±–æ –Ω–∞–∂–∞—Ç—å (y) –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)"
    buttons = []
    if status == 'OK':
        buttons.append({"content_type": "text", "payload": "astanaErc.pay", "title": "–û–ø–ª–∞—Ç–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é"})
    for acc in astanaErc_accounts:
        buttons.append({"content_type": "text", "payload": "astanaErc.last", "title": acc})
    buttons.append({"content_type": "text", "payload": "astanaErc.delete", "title": "–£–¥–∞–ª–∏—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç"})
    data_quick_replies = {
        "recipient": {"id": sender},
        "message": {
            "text": data_text,
            "quick_replies": buttons
        }
    }
    requests.post(fb_url, json=data_quick_replies)

def reply_astanaErc_delete(sender, last_sender_message):
    astanaErc_accounts = last_sender_message['astanaErc_accounts']
    buttons = []
    for acc in astanaErc_accounts:
        buttons.append({"content_type": "text", "payload": "astanaErc.delete.acc", "title": acc})

    data_quick_replies = {
        "recipient": {"id": sender},
        "message": {
            "text": "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç, —á—Ç–æ–±—ã –µ–≥–æ —É–¥–∞–ª–∏—Ç—å",
            "quick_replies": buttons
        }
    }
    requests.post(fb_url, json=data_quick_replies)

def reply_astanaErc_delete_acc(sender, text, last_sender_message):
    last_sender_message['astanaErc_accounts'].remove(text)
    main.reply(sender, "–õ–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç " + text + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
    reply_astanaErc_enter(sender, last_sender_message)
    last_sender_message['payload'] = 'astanaErc.enter'
    main.mongo_update_record(last_sender_message)

def reply_astanaErc_chooseCard(sender, last_sender_message):
    main.reply_typing_on(sender)
    main.reply_display_cards(sender, last_sender_message)
    last_sender_message['lastCommand'] = 'astanaErc'
    main.mongo_update_record(last_sender_message)

def reply_astanaErc_csc(sender, payload, last_sender_message):
    main.reply_typing_on(sender)
    chosenCard = last_sender_message[payload]
    result = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—ã:\n'
    invoiceData = get_komuslugi_invoice(last_sender_message)
    c = 0
    sum = 0
    for i in invoiceData['details']:
        desc = i['description']
        invoiceData['details'][c]['amount'] = math.ceil(invoiceData['details'][c]['amount'])
        amount = i['amount']
        debt = i['debt']
        sum += amount + debt
        sum_str = ', —Å—É–º–º–∞ ' + str(amount + debt) + ' —Ç–≥'
        result += desc + sum_str + '\n'
        c += 1
    result += '\n–ò—Ç–æ–≥–æ: ' + str(sum) + ' —Ç–≥'
    result += "\n–ö–∞—Ä—Ç–∞: " + chosenCard + '\n\n'
    result += "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ CSC/CVV2 –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∫–∞—Ä—Ç—ã"
    main.reply(sender, result)
    last_sender_message['payload'] = 'astanaErc.startPayment'
    main.mongo_update_record(last_sender_message)

def reply_astanaErc_startPayment(sender, message, last_sender_message):
    if not helper.check_csc(message):
        main.reply(sender, "–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ CSC/CVV2 –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –∫–∞—Ä—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return "ok"
    main.reply(sender, "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...")
    main.reply_typing_on(sender)
    # 1 - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ post.kz
    try:
        url_login = 'https://post.kz/mail-app/api/account/'
        headers = {"Authorization": "Basic " + last_sender_message['encodedLoginPass'],
                   'Content-Type': 'application/json'}

        session = requests.Session()
        r = session.get(url_login, headers=headers)
        mobileNumber = last_sender_message['mobileNumber']

        # 2 - –≤—ã–∑–æ–≤ getCards()
        url_login6 = 'https://post.kz/mail-app/api/intervale/card?device=mobile'
        sd2 = {"blockedAmount": "", "phone": mobileNumber, "paymentId": "", "returnUrl": "", "transferId": ""}
        r = session.post(url_login6, json=sd2)
        card = r.json()[last_sender_message['chosenCardIndex']]

        # 3 - –≤—ã–∑–æ–≤ getToken()
        url_login4 = url + portal_id + '/token'
        headers = {'Content-Type': 'application/x-www-form-urlencoded',
                   'X-Channel-Id': x_channel_id,
                   'X-IV-Authorization': 'Identifier ' + mobileNumber}
        r = session.post(url_login4, headers=headers)
        token = r.json()['token']

        # 4 - –≤—ã–∑–æ–≤ startPayment()
        amount = last_sender_message['amount']
        data = {'paymentId': 'MoneyTransfer_KazPost_Card2Card',
                'currency': 'KZT',
                'amount': str(amount) + '00',
                'commission': str(last_sender_message['commission']) + '00',
                'total': str(last_sender_message['total']) + '00',
                'src.type': 'card_id',
                'src.cardId': card['id'],
                'src.csc': message,
                'dst.type': 'card',
                'dst.pan': last_sender_message['lastCardDst'],
                'returnUrl': 'https://transfer.post.kz/?token=' + token}

        url_login5 = url + portal_id + '/payment/' + token + '/start'
        r = session.post(url_login5, data=data, headers=headers)

        # 5 - –≤—ã–∑–æ–≤ statusPayment()

        url_login10 = url + portal_id + '/payment/' + token
        r = session.post(url_login10, headers=headers)
        data = r.json()
        state = data['state']
        if state == 'redirect':
            reply_send_redirect_url(sender, data['url'])

        card_w_spaces = helper.insert_4_spaces(last_sender_message['lastCardDst'])
        timer = 0
        while timer < timeout:
            time.sleep(1)
            r = session.post(url_login10, headers=headers)
            data = r.json()
            try:
                result_status = data['result']['status']
                if result_status == 'fail':
                    reply(sender, "–ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
                elif result_status == 'success':
                    res = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –ü–ª–∞—Ç–µ–∂ –±—ã–ª –ø—Ä–æ–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ, –∫–∞—Ä—Ç–∞ " + card_w_spaces + " –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É " + str(
                        amount) + " —Ç–≥.\n"
                    res += "–ù–æ–º–µ—Ä –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏: " + str(data['result']['trxId'])
                    res += ", –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ post.kz –≤ —Ä–∞–∑–¥–µ–ª–µ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π"
                    reply(sender, res)
                last_sender_message['payload'] = 'card2card.finished'
                mongo_update_record(last_sender_message)
                reply_typing_off(sender)
                reply_main_menu_buttons(sender)
                return "ok"
            except Exception as e:
                pass
            timer += 1

        last_sender_message = collection_messages.find_one({"sender": sender})
        if last_sender_message['payload'] == 'card2card.startPayment':
            strminutes = str(timeout // 60)
            reply(sender, "–ü—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ " + strminutes + " –º–∏–Ω—É—Ç: –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è")
            reply_typing_off(sender)
            reply_main_menu_buttons(sender)
            last_sender_message['payload'] = 'mainMenu'
            mongo_update_record(last_sender_message)
        return "time exceed"
    except Exception as e:
        reply(sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
        reply_typing_off(sender)
        reply_main_menu_buttons(sender)
        logging.error(helper.PrintException())
        return "fail"