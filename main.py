import requests
import base64
import os
import pymongo
import datetime
import logging
import json
import constants
import helper

client = pymongo.MongoClient()
db = client.kpsmartbot_db
collection_messages = db.messages
url = constants.url
x_channel_id = constants.x_channel_id
portal_id = constants.portal_id
portal_id_2 = constants.portal_id_2
ACCESS_TOKEN = constants.ACCESS_TOKEN
fb_url = "https://graph.facebook.com/v2.6/me/messages?access_token=" + ACCESS_TOKEN
api_key = constants.api_key

hint_main_menu = "(–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É (y) "
hint_main_menu2 = "(–ù–∞–∂–º–∏—Ç–µ (y) –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)"
timeout = 300
to_find_dict = {'nearest.postamats': '–±–ª–∏–∂–∞–π—à–∏–π –ø–æ—Å—Ç–∞–º–∞—Ç',
                'nearest.offices': '–±–ª–∏–∂–∞–π—à–µ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ',
                'nearest.atms': '–±–ª–∏–∂–∞–π—à–∏–π –±–∞–Ω–∫–æ–º–∞—Ç'}

url_mobile_payments = 'https://post.kz/finance/payment/mobile'

def get_authorized_session(encodedLoginPass):
    url_login = 'https://post.kz/mail-app/api/account/'
    headers = {"Authorization": "Basic " + encodedLoginPass, 'Content-Type': 'application/json'}
    session = requests.Session()
    session.get(url_login, headers=headers)
    return session

def get_token_postkz(session, mobileNumber):
    url_login4 = 'https://post.kz/mail-app/api/intervale/token'
    sd2 = {"blockedAmount": "", "phone": mobileNumber, "paymentId": "", "returnUrl": "", "transferId": ""}
    r = session.post(url_login4, json=sd2)
    return r.json()['token']

def get_cards_json(sender, last_sender_message):
    session = get_authorized_session(last_sender_message['encodedLoginPass'])

    url_login6 = 'https://post.kz/mail-app/api/intervale/card?device=mobile'
    sd2 = {"blockedAmount": "", "phone": last_sender_message['mobileNumber'], "paymentId": "", "returnUrl": "",
           "transferId": ""}
    r = session.post(url_login6, json=sd2)
    if r.status_code != 200:
        reply(sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
        reply_main_menu_buttons(sender)
    return r.json()

def mongo_update_record(last_sender_message):
    collection_messages.update_one({'sender': last_sender_message['sender']},
                                   {"$set": last_sender_message}, upsert=False)

def mongo_get_by_sender(sender):
    return collection_messages.find_one({"sender": sender})

def check_login(sender, last_sender_message):
    if last_sender_message['encodedLoginPass'] == None:
        reply(sender, "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞ post.kz —á–µ—Ä–µ–∑ "
                      "–ø—Ä–æ–±–µ–ª. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ https://post.kz/register")
        last_sender_message['payload'] = 'auth'
        mongo_update_record(last_sender_message)
        return False
    return True

def send_voice(sender, msg):
    try:
        ya_url = 'https://tts.voicetech.yandex.net/generate?key=' + api_key + '&text='
        ya_url += msg
        ya_url += '&format=mp3&quality=hi&lang=ru-RU&speaker=omazh&speed=1.0&emotion=good'
        r = requests.get(ya_url)
        voice_file = 'ya_' + sender + '.mp3'
        with open(voice_file, "wb") as o:
            o.write(r.content)
        data = {
            'recipient': '{id:' + sender + '}',
            'message': '{"attachment":{"type":"audio", "payload":{}}}'
        }
        files = {'filedata': (voice_file, open(voice_file, "rb"), 'audio/mp3')}
        requests.post(fb_url, data=data, files=files)
        try:
            os.remove(voice_file)
        except:
            pass
    except:
        logging.error(helper.PrintException())

def reply(sender, msg):
    if len(msg) > 640:
        result = ''
        msg_parts = msg.split('\n')
        for part in msg_parts:
            if len(result + part + '\n') > 640:
                data = {"recipient": {"id": sender}, "message": {"text": result}}
                requests.post(fb_url, json=data)
                result = part + '\n'
            else:
                result += part + '\n'
        msg = result
    data = {"recipient": {"id": sender}, "message": {"text": msg}}
    requests.post(fb_url, json=data)
    last_sender_message = collection_messages.find_one({"sender": sender})
    if last_sender_message['sendVoice']:
        send_voice(sender, msg)

def reply_just_text(sender, msg):
    data = {"recipient": {"id": sender}, "message": {"text": msg}}
    requests.post(fb_url, json=data)

def reply_gif_desktop(sender):
    data = {
        "recipient": {"id": sender},
        "message": {"attachment": {"type": "image", "payload":
                    {'url': 'https://thumbs.gfycat.com/TastyOrderlyCod-size_restricted.gif'}}}
    }
    requests.post(fb_url, json=data)

def reply_gif_mobile(sender):
    data = {
        "recipient": {"id": sender},
        "message": {"attachment": {"type": "image", "payload":
                    {'url': 'https://thumbs.gfycat.com/ThickHappyHalicore-size_restricted.gif'}}}
    }
    requests.post(fb_url, json=data)

def reply_typing_on(sender):
    data = {"recipient": {"id": sender}, "sender_action": "typing_on"}
    requests.post(fb_url, json=data)

def reply_typing_off(sender):
    data = {"recipient": {"id": sender}, "sender_action": "typing_off"}
    requests.post(fb_url, json=data)

def reply_main_menu_buttons(sender):
    data_main_menu_buttons = {
        "recipient": {"id": sender},
        "message": {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "generic",
                    "elements": [
                        {
                            "title": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            "buttons": [
                                {
                                    "type": "postback",
                                    "title": "üì≤ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                                    "payload": "balance"
                                },
                                {
                                    "type": "postback",
                                    "title": "üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ",
                                    "payload": "tracking"
                                },
                                {
                                    "type": "postback",
                                    "title": "üìç–ë–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è",
                                    "payload": "nearest"
                                }
                            ]
                        },
                        {
                            "title": "–î–æ–ø. —É—Å–ª—É–≥–∏",
                            "buttons": [
                                {
                                    "type": "postback",
                                    "title": "üí≤ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç",
                                    "payload": "10.kursy"
                                },
                                {
                                    "type": "postback",
                                    "title": "üöó –®—Ç—Ä–∞—Ñ—ã –ü–î–î",
                                    "payload": "shtrafy"
                                },
                                {
                                    "type": "postback",
                                    "title": "üìÉ –û–ø–ª–∞—Ç–∞ –∫–æ–º.—É—Å–ª—É–≥",
                                    "payload": "komuslugi"
                                }
                            ]
                        },
                        {
                            "title": "–ü–ª–∞—Ç–µ–∂–∏",
                            "buttons": [
                                {
                                    "type": "postback",
                                    "title": "üí≥ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É",
                                    "payload": "card2card"
                                },
                                {
                                    "type": "postback",
                                    "title": "üí∏ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É–∫–∏",
                                    "payload": "card2cash"
                                },
                                {
                                    "type": "postback",
                                    "title": "üöå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –û–Ω–∞–π",
                                    "payload": "onai"
                                },
                            ]
                        },
                        {
                            "title": "–ü—Ä–æ—á–∏–µ —É—Å–ª—É–≥–∏",
                            "buttons": [
                                {
                                    "type": "web_url",
                                    "title": "‚öñÔ∏è C—É–¥–µ–±–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã",
                                    "url": "https://post.kz/finance/payment/fines",
                                    "webview_height_ratio": "full"
                                },
                                {
                                    "type": "postback",
                                    "title": "üìÅ –ü—Ä–æ—á–µ–µ",
                                    "payload": "misc"
                                },
                                {
                                    "type": "postback",
                                    "title": "‚úñ –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞",
                                    "payload": "disable.bot"
                                }
                            ]
                        },
                        {
                            "title": "–ü—Ä–æ—Ñ–∏–ª—å –Ω–∞ post.kz",
                            "buttons": [
                                {
                                    "type": "postback",
                                    "title": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                                    "payload": "auth"
                                },
                                {
                                    "type": "postback",
                                    "title": "–ú–æ–∏ –∫–∞—Ä—Ç—ã",
                                    "payload": "addcard"
                                },
                                {
                                    "type": "postback",
                                    "title": "–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                                    "payload": "auth.delete"
                                }
                            ]
                        }
                    ]
                }
            }
        }
    }
    requests.post(fb_url, json=data_main_menu_buttons)

def reply_display_cards(sender, last_sender_message):
    session = requests.Session()
    headers = {"Authorization": "Basic " + last_sender_message['encodedLoginPass'], 'Content-Type': 'application/json'}
    url_login = 'https://post.kz/mail-app/api/account/'
    r = session.get(url_login, headers=headers)

    url_login6 = 'https://post.kz/mail-app/api/intervale/card?device=mobile'
    sd2 = {"blockedAmount": "", "phone": last_sender_message['mobileNumber'], "paymentId": "", "returnUrl": "",
           "transferId": ""}
    r = session.post(url_login6, json=sd2)
    cards = r.json()
    if r.status_code != 200:
        reply(sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
        reply_main_menu_buttons(sender)
        return "again"

    title = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É"
    cards_group = []
    cards_array = []
    index = 0
    if len(cards) == 0:
        reply(sender, "–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ post.kz. "
                      "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ 16—Ç–∏-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã")
        last_sender_message['payload'] = 'addcard'
        mongo_update_record(last_sender_message)
        return
    for card in cards:
        if card['state'] != 'REGISTERED':
            continue
        if index % 3 == 0 and index > 0:
            cards_group.append({"title": title, "buttons": cards_array})
            cards_array = []
        card_title = card['title']
        if len(card_title) > 20:
            card_title = card['brand'] + ' *' + card['alias']
        cards_array.append({"type": "postback", "title": card_title, "payload": str(index)})
        last_sender_message[str(index)] = card_title
        index += 1

    cards_group.append({"title": title, "buttons": cards_array})

    data_cards = {
        "recipient": {"id": sender},
        "message": {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "generic",
                    "elements": cards_group
                }
            }
        }
    }
    requests.post(fb_url, json=data_cards)
    mongo_update_record(last_sender_message)

def reply_send_redirect_url(sender, url):
    data_url_button = {
        "recipient": {
            "id": sender
        },
        "message": {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "generic",
                    "elements": [
                        {
                            "title": "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ 3DSecure/MasterCode, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                            "buttons": [
                                {
                                    "type": "web_url",
                                    "title": "3DSecure/MasterCode",
                                    "webview_height_ratio": "tall",
                                    "url": url
                                }
                            ]
                        }

                    ]
                }
            }
        }
    }
    requests.post(fb_url, json=data_url_button)
    reply_typing_off(sender)

def reply_currencies_kursy(sender):
    data = requests.get("https://post.kz/mail-app/info/remote/currencies/ops").json()
    result = "–ö—É—Ä—Å –≤–∞–ª—é—Ç –Ω–∞ " + datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S') + " (–≤—Ä–µ–º—è –∞—Å—Ç–∞–Ω–∏–Ω—Å–∫–æ–µ GMT +6)\n"
    result += "USD: " + data['usdBuy'] + " / " + data['usdSell'] + '\n'
    result += "EUR: " + data['eurBuy'] + " / " + data['eurSell'] + '\n'
    result += "RUB: " + data['rurBuy'] + " / " + data['rurSell'] + '\n'
    result += hint_main_menu
    reply(sender, result)

def reply_auth(sender, loginPass, last_sender_message):
    url_login = 'https://post.kz/mail-app/api/account/'
    login = loginPass.split()[0]
    loginPass = loginPass.replace(' ', ':').encode()
    encodedLoginPass = base64.b64encode(loginPass).decode("utf-8")
    headers = {"Authorization": "Basic " + encodedLoginPass}

    r = requests.get(url_login, headers=headers)
    status_code = r.status_code
    if status_code == 401:
        reply(sender, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    elif status_code == 200:
        profile_data = r.json()
        iin = profile_data['iin']
        mobile = '7' + profile_data['mobileNumber'][-10:]
        answer = "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + profile_data['firstName'] + "!\n"
        answer += "–í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º–∏ –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º"
        reply(sender, answer)
        last_sender_message['encodedLoginPass'] = encodedLoginPass
        last_sender_message['login'] = login
        last_sender_message['iin'] = iin
        last_sender_message['mobileNumber'] = mobile
        mongo_update_record(last_sender_message)
        reply_main_menu_buttons(sender)

def reply_misc(sender):
    data_misc_buttons = {
        "recipient": {"id": sender},
        "message": {
            "attachment": {
              "type": "template",
              "payload": {
                "template_type": "button",
                "text": " –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n" + hint_main_menu,
                "buttons": [
                  {
                    "type": "web_url",
                    "title": "üìù –†–∞–±–æ—Ç–∞ –≤ –ö–∞–∑–ü–æ—á—Ç–µ",
                    "url": "https://post.kz/info/7/o-kompanii/item/273/vacancy",
                    "webview_height_ratio": "full"
                  },
                  {
                    "type": "web_url",
                    "title": "üìú–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–≤–∏—Ç–∞–Ω—Ü–∏—é",
                    "url": "https://post.kz/invoice",
                    "webview_height_ratio": "full"
                  },
                  {
                    "type": "web_url",
                    "title": "üè¢ –ü–æ—Å–µ—Ç–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏–µ",
                    "url": "https://post.kz/departments/list",
                    "webview_height_ratio": "full"
                  }
                ]
              }
            }
          }
    }
    requests.post(fb_url, json=data_misc_buttons)

def reply_has_cards(sender, last_sender_message):
    session = get_authorized_session(last_sender_message['encodedLoginPass'])
    
    url_login6 = 'https://post.kz/mail-app/api/intervale/card?device=mobile'
    sd2 = {"blockedAmount": "", "phone": last_sender_message['mobileNumber'], "paymentId": "",
           "returnUrl": "", "transferId": ""}
    r = session.post(url_login6, json=sd2)
    if r.status_code != 200:
        reply(sender, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ")
        reply_main_menu_buttons(sender)
        return False
    cardsCount = len(r.json())
    return cardsCount > 0

def reply_nearest(sender):
    data_misc_buttons = {
        "recipient": {"id": sender},
        "message": {
            "attachment": {
                "type": "template",
                "payload": {
                    "template_type": "button",
                    "text": " –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É\n" + hint_main_menu,
                    "buttons": [
                        {
                            "type": "postback",
                            "title": "üì¶ –ü–æ—Å—Ç–∞–º–∞—Ç—ã",
                            "payload": "nearest.postamats"
                        },
                        {
                            "type": "postback",
                            "title": "üè¢ –û—Ç–¥–µ–ª–µ–Ω–∏—è",
                            "payload": "nearest.offices"
                        },
                        {
                            "type": "postback",
                            "title": "üèß –ë–∞–Ω–∫–æ–º–∞—Ç—ã",
                            "payload": "nearest.atms"
                        }
                    ]
                }
            }
        }
    }
    requests.post(fb_url, json=data_misc_buttons)

def reply_nearest_request_location(sender, payload):
    data_quick_replies = {
        "recipient": {
            "id": sender
        },
        "message": {
            "text": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ " + to_find_dict[payload],
            "quick_replies": [
                {
                    "content_type": "location",
                }
            ]
        }
    }
    requests.post(fb_url, json=data_quick_replies)

def reply_nearest_find(sender, locLong, locLat, payload):
    try:
        fileName = ''
        title = ''

        if payload != 'nearest.offices':
            if payload == 'nearest.postamats':
                fileName = 'postamats.json'
                title = '–ë–ª–∏–∂–∞–π—à–∏–π –ü–æ—Å—Ç–∞–º–∞—Ç'
            elif payload == 'nearest.atms':
                fileName = 'atms.json'
                title = '–ë–ª–∏–∂–∞–π—à–∏–π –ë–∞–Ω–∫–æ–º–∞—Ç'

            with open('initial_data/' + fileName) as json_data:
                d = json.load(json_data)

            items = []
            for model in d:
                if model['fields']['is_active']:
                    dist = helper.get_distance_in_meters(locLat, float(model['fields']['latitude']), locLong, float(model['fields']['longitude']))
                    items.append((model['fields'], dist))

            items.sort(key=lambda x: x[1])
            closestLoc = items[0][0]

            res = title + ':\n'
            if payload == 'nearest.postamats':
                res += closestLoc['full_name'] + '\n'
                res += '–ì–æ—Ä–æ–¥: ' + closestLoc['city'] + '\n'
                res += '–ò–Ω–¥–µ–∫—Å: ' + closestLoc['postcode'] + '\n'
                if closestLoc['postcode_new'] != None:
                    res += '–ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: ' + closestLoc['postcode_new'] + '\n'

            if payload == 'nearest.atms':
                res += closestLoc['address'] + '\n'
            res += '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ' + str(items[0][1]) + ' –º.'
            reply(sender, res)
            reply_nearest_map_location(sender, closestLoc['longitude'], closestLoc['latitude'], title)
        else:
            title = '–ë–ª–∏–∂–∞–π—à–µ–µ –û—Ç–¥–µ–ª–µ–Ω–∏–µ'
            url = 'http://test.monitor.kazpost.kz/api/jsons/find_dep.json?'
            url += 'lat=' + str(locLat).replace('.', ',') + '&lng=' + str(locLong).replace('.', ',')
            r = requests.get(url)
            try:
                data = r.json()
            except:
                data = r.text
                a = data.find('\"answer\":\"') + 10
                b = data.find('\"}')
                answer = data[a:b].replace('\"', '\\\"')
                part1 = data.split('\"answer\":\"')[0]
                result = part1 + '\"answer\":\"' + answer + '\"}'
                data = json.loads(result)
            reply(sender, data['answer'])
            reply_nearest_map_location(sender, data['longitude'].replace(',', '.'), data['latitude'].replace(',', '.'), title)

    except:
        reply(sender, '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ')

def reply_nearest_map_location(sender, locLong, locLat, title):
    latCommaLong = str(locLat) + ',' + str(locLong)
    image_url = 'https://maps.googleapis.com/maps/api/staticmap?size=764x400&center='
    image_url += latCommaLong + '&zoom=15&markers=' + latCommaLong
    web_url = 'https://www.google.com/maps/place/' + latCommaLong
    data_misc_buttons = {
      "recipient":{ "id":sender },
      "message":{
        "attachment":{
          "type":"template",
          "payload":{
            "template_type":"generic",
            "elements":[
               {
                "title":title,
                "image_url":image_url,
                "default_action": {
                  "type": "web_url",
                  "url": web_url
                }
              }
            ]
          }
        }
      }
    }

    requests.post(fb_url, json=data_misc_buttons)

def reply_auth_delete(sender):
    data_quick_replies = {
        "recipient": {"id": sender},
        "message": {
            "text": "–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é?",
            "quick_replies": [
                {
                    "content_type": "text",
                    "title": "–î–∞",
                    "payload": "auth.delete.yes"
                },
                {
                    "content_type": "text",
                    "title": "–ù–µ—Ç",
                    "payload": "auth.delete.no"
                }
            ]
        }
    }
    requests.post(fb_url, json=data_quick_replies)
